# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django specific
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask specific
instance/
.webassets-cache

# Scrapy specific
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is typically named 'django.xml'.
.idea/

# VS Code
.vscode/
*.code-workspace

# Sublime Text
*.sublime-project
*.sublime-workspace

# Django specific files
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Django migrations (optional - depends on your workflow)
# migrations/

# Static files (if collected)
/static/
/staticfiles/
/collected_static/

# Media files
/media/

# Node.js dependencies (if using Node.js for frontend)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Webpack bundles
/webpack-stats.json

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Secret files
secrets.json
.secrets/

# Database files
*.db
*.sqlite
*.sqlite3

# Configuration files with sensitive data
config.ini
settings_local.py
local_config.py

# Backup files
*.bak
*.backup
*.tmp
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Temporary files
*.tmp
*.temp
.temporary/

# Logs and databases
*.log
*.sql
*.sqlite

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/

# Dependency directories
jspm_packages/

# Optional npm cache directory
.npm

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# Sass cache
.sass-cache/

# CSS preprocessor files
*.scss.map
*.sass.map

# Compiled CSS and JS
/static/css/compiled/
/static/js/compiled/

# Certificate files
*.pem
*.key
*.crt
*.csr

# Docker files (if you want to ignore them)
# Dockerfile
# docker-compose.yml

# Cache directories
.cache/
.parcel-cache/

# Build artifacts
build/
dist/

# Redis dump file
dump.rdb

# Memcached dump file
*.memdump

# Custom application specific files
uploads/
downloads/
temp/
cache/

# Testing artifacts
.coverage
htmlcov/
.pytest_cache/
.tox/

# Documentation builds
docs/_build/
site/

# Localization
locale/

# Collected static files
collected_static/

# Celery beat schedule file
celerybeat-schedule

# Virtual environment activation scripts
activate
activate.bat
activate.ps1
deactivate.bat

# Editor swap files
*.swp
*.swo
*~

# JetBrains IDEs
.idea/
*.iml
*.ipr
*.iws

# Eclipse
.project
.pydevproject
.settings/

# Vim
*.swp
*.swo

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# Local development database dumps
*.dump
*.sql

# Ansible files
*.retry

# Terraform files
*.tfstate
*.tfstate.*
.terraform/

# Application specific temp files
*.tmp.*
temp_*
temporary_*

# Error logs
error.log
debug.log
access.log

# Email files
*.eml

# Compressed files (optional)
*.zip
*.tar.gz
*.rar
*.7z

# Binary files that might be generated
*.exe
*.dll
*.so
*.dylib

# macOS specific
.AppleDouble
.LSOverride
Icon?

# Windows specific
Desktop.ini
$RECYCLE.BIN/

# Linux specific
.fuse_hidden*
.directory
.Trash-*
.nfs*
